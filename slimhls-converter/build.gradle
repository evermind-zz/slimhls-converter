plugins {
    id 'com.android.library'
    id 'maven-publish'
}

// OS detection and paths
def isWindows = System.getProperty("os.name").toLowerCase().contains("windows")
def isMac = System.getProperty("os.name").toLowerCase().contains("mac")
def isLinux = !isWindows && !isMac

// FFmpeg source directory
def downloadDir = "${projectDir}/downloads"
def ffmpegVersion = "7.1.1"
// set ffmpegGitCommitHash to null if you want to use a tarball as source
def ffmpegGitCommitHash = "b4d9fa6cb93a3ef8209508b2fb9cd1dc95f03090"
def ffmpegGitSourceDir = file("${downloadDir}/ffmpeg-git")
def ffmpegTarball = file("${downloadDir}/ffmpeg-${ffmpegVersion}.tar.gz")
def ffmpegExtractedDir = "${downloadDir}/ffmpeg-${ffmpegVersion}"
def ffmpegDir = ffmpegGitCommitHash ? ffmpegGitSourceDir : file(ffmpegExtractedDir)

// Determine HOST_TAG based on OS
def hostTag = isWindows ? "windows-x86_64" : isMac ? "darwin-x86_64" : "linux-x86_64"

def upxPath = "${projectDir}/tools/upx/" +
        (isWindows ? "upx-amd64-win.exe" : isMac ? "upx-macos" : "upx-amd64-linux")
def upxAvailable = file(upxPath).exists()
def nproc = Runtime.runtime.availableProcessors()

println "UPX Path: $upxPath"
println upxAvailable ? "UPX binary found." : "UPX binary not found or unsupported on this platform."
println "HOST_TAG: $hostTag"
println "FFMPEG_SOURCE_DIR: $ffmpegDir"

android {
    namespace 'com.github.evermindzz.slimhls.converter'
    compileSdk 31

    defaultConfig {
        minSdk 19
        targetSdk 34
        versionCode 1
        versionName "1.0.0"

        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
        }

        externalNativeBuild {
            cmake {
                arguments "-DNUM_JOBS=${nproc}", "-DUPX_PATH=${upxAvailable ? upxPath.replace('\\', '/') : ''}", "-DHOST_TAG=${hostTag}", "-DFFMPEG_SOURCE_DIR=${ffmpegDir}"
            }
        }

        ndkVersion = System.getenv('NDK_VERSION') ?: '25.2.9519653'
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['src/main/jniLibs']
        }
    }

    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
        }
    }

    // -DCMAKE_BUILD_TYPE=.. is ignored for now in our CMakeLists.txt as we won't
    // debug ffmpeg:) -- at least for now so keep it for reference
    buildTypes {
        debug {
            externalNativeBuild.cmake {
                arguments "-DCMAKE_BUILD_TYPE=Debug"
            }
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            externalNativeBuild.cmake {
                arguments "-DCMAKE_BUILD_TYPE=RelWithDebInfo"
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    publishing {
        singleVariant('release') {
            withSourcesJar()
            withJavadocJar()
        }
    }

    packagingOptions {
        jniLibs {
            // we created a dummy library in CMakeLists.txt to just trigger the autotools build of ffmpeg
            // but we do not want to distribute it
            excludes += ['**/libdummy.so']
        }
    }
}

dependencies {
    // None for now
}

// Checkout FFmpeg
tasks.register("prepareFFmpegSource") {
    doLast {
        if (ffmpegGitCommitHash) {
            if (!ffmpegGitSourceDir.exists()) {
                println "Cloning FFmpeg commit ${ffmpegGitCommitHash}"
                ffmpegGitSourceDir.mkdirs()
                exec {
                    workingDir ffmpegGitSourceDir
                    commandLine "git", "init"
                }
                exec {
                    workingDir ffmpegGitSourceDir
                    commandLine "git", "remote", "add", "origin", "https://github.com/evermind-zz/FFmpeg4slimhls-converter"
                }
                exec {
                    workingDir ffmpegGitSourceDir
                    commandLine "git", "fetch", "--depth", "1", "origin", ffmpegGitCommitHash
                }
                exec {
                    workingDir ffmpegGitSourceDir
                    commandLine "git", "checkout", "FETCH_HEAD"
                }
            } else {
                println "FFmpeg source already exists"
            }
        } else {
            if (!ffmpegTarball.exists()) {
                println "Downloading FFmpeg ${ffmpegVersion}..."
                new URL("https://ffmpeg.org/releases/ffmpeg-${ffmpegVersion}.tar.gz").withInputStream { i ->
                    ffmpegTarball.withOutputStream { it << i }
                }
                println "Download complete."
            } else {
                println "FFmpeg tarball already exists. Skipping download."
            }
            if (!file(ffmpegExtractedDir).exists()) {
                copy {
                    from tarTree(ffmpegTarball)
                    into downloadDir
                }
                println "Extraction complete."
            } else {
                println "FFmpeg source already extracted. Skipping extraction."
            }
        }
    }
}

tasks.named("preBuild") {
    dependsOn "prepareFFmpegSource"
}

// Create a tarball snapshot of FFmpeg source (for GPL distribution)
tasks.register("createFFmpegSnapshot", Tar) {
    dependsOn "prepareFFmpegSource"
    archiveExtension.set("tar.gz")
    compression = Compression.GZIP
    archiveBaseName.set("ffmpeg-snapshot-${ffmpegGitCommitHash ?: ffmpegVersion}")
    destinationDirectory.set(file("${projectDir}/dist"))
    from ffmpegDir
    println "FFmpeg snapshot can be found here ${projectDir}/dist"
}

// Maven publication setup
afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.release
                groupId 'com.github.evermind-zz'
                artifactId 'slimhls-converter'
                version android.defaultConfig.versionName
            }
        }
    }
}
